name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: creditrisk-api-rs
  DOCKER_IMAGE: logistic-regression-api
  RUST_BACKTRACE: 1

jobs:
  quality:
    name: Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache"

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run linting
        run: cargo clippy --all-targets -- -D warnings

      - name: Security vulnerability scan
        uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: cargo test --verbose

      - name: Generate test coverage
        run: |
          cargo install cargo-tarpaulin --locked
          cargo tarpaulin \
            --workspace \
            --packages creditrisk-api-rs \
            --out Xml \
            --output-dir ./coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: true
          verbose: true

  build:
    name: Build & Release
    needs: quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache"

      - name: Extract version from Cargo.toml
        id: version
        run: |
          version=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Generate Rust documentation
        run: cargo doc --no-deps --release

      - name: Package binary
        run: |
          mkdir -p artifacts
          cp target/release/${{ env.BINARY_NAME }} artifacts/
          tar czvf artifacts/${{ env.BINARY_NAME }}-v${{ steps.version.outputs.version }}.tar.gz -C artifacts ${{ env.BINARY_NAME }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_NAME }}-${{ steps.version.outputs.version }}
          path: artifacts/${{ env.BINARY_NAME }}-v${{ steps.version.outputs.version }}.tar.gz
          retention-days: 7

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/${{ env.BINARY_NAME }}-v${{ steps.version.outputs.version }}.tar.gz
          generate_release_notes: true

  docker:
    name: Docker Build
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.build.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
